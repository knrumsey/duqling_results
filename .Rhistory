)
ggplot(TT_long, aes(x = variable, y = sobol)) +
geom_violin(fill = "#3b9f9f", color = "#0a0c32", scale = "width", width = 0.8) +
scale_x_discrete(labels = function(x) parse(text = pretty_labels[x])) +
labs(x = NULL, y = "Total Sobol Index") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 1, family = "serif", size = 8),
axis.title.y = element_text(family = "serif", size = 14),
panel.grid.major.x = element_blank()
) +
scale_y_continuous(limits = c(0, 1)) +
coord_cartesian(ylim = c(0, 1)) +
ggtitle("Cylinder Experiments")
### WINE DATA
data <- read.csv("data/winequality-white.csv", sep=";")
XX <- apply(data[,-12], 2, BASS:::scale_range)
yy <- data[,12] - 2
fit_wine <- ordinal_khaos(XX, yy)
sob2 <- sobol_khaos(fit_wine)
TT <- cbind(sob2$T, sob2$leftover)
colnames(TT) <- c(colnames(XX), "epsilon")
original_order <- colnames(TT)
TT_long <- as.data.frame(TT) %>%
mutate(draw = 1:n()) %>%
pivot_longer(-draw, names_to = "variable", values_to = "sobol") %>%
mutate(variable = factor(variable, levels = original_order))
pretty_labels <- c(
fixed.acidity         = "italic(F)[acid]",
volatile.acidity      = "italic(V)[acid]",
citric.acid           = "italic(C)[acid]",
residual.sugar        = "italic(R)[sugar]",
chlorides             = "italic(Cl)",
free.sulfur.dioxide   = "italic(S)[free]",
total.sulfur.dioxide  = "italic(S)[total]",
density               = "italic(rho)",
pH                    = "italic(pH)",
sulphates             = "italic(SO)[4]^'-'",
alcohol               = "italic(A)",
epsilon               = "epsilon"
)
ggplot(TT_long, aes(x = variable, y = sobol)) +
geom_violin(fill = "#3b9f9f", color = "#0a0c32", scale = "width", width = 0.8) +
scale_x_discrete(labels = function(x) parse(text = pretty_labels[x])) +
labs(x = NULL, y = "Total Sobol Index") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 1, family = "serif", size = 8),
axis.title.y = element_text(family = "serif", size = 14),
panel.grid.major.x = element_blank()
) +
scale_y_continuous(limits = c(0, 1)) +
coord_cartesian(ylim = c(0, 1)) +
ggtitle("Wine Quality (Ordinal)")
res <- res_khaos
#=================================
#  MAKE FIGURES
#=================================
res <- process_sim_study(res, scale_CRPS = FALSE)
heatmap_sim_study(filter_sim_study(res, NSR=0),
metric = "CRPS_rank",
title="CRPS Rank (NSR = 0)",
orientation = "horizontal", color_scale = "mako")
heatmap_sim_study(filter_sim_study(res, NSR=0.5),
metric = "CRPS_rank",
title="    (NSR = 0.5)",
orientation = "horizontal", color_scale = "mako")
#=================================
#  MAKE FIGURES
#=================================
res <- process_sim_study(res, scale_CRPS = TRUE)
heatmap_sim_study(filter_sim_study(res, NSR=0),
metric = "CRPS_rank",
title="CRPS Rank (NSR = 0)",
orientation = "horizontal", color_scale = "mako")
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS_rel", "time_rel"))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS_rel", "time"))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS_rel", "time"), epsilon=c(0.001, 0))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS_norm", "time"), epsilon=c(0.001, 0))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS", "time"), epsilon=c(0.001, 0))
res <- res_khaos
#=================================
#  MAKE FIGURES
#=================================
res <- process_sim_study(res, scale_CRPS = TRUE)
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS", "time"), epsilon=c(0.001, 0))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS", "time"))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0.5) %>%
paretoplot_sim_study(metric=c("CRPS", "time"))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS", "time"))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS_rank", "time"))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res) %>%
paretoplot_sim_study(metric=c("CRPS_rank", "time"))
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS_rank", "time"))
filter_sim_study(res, NSR=0.5) %>%
paretoplot_sim_study(metric=c("CRPS_rank", "time"))
filter_sim_study(res, NSR=0.5) %>%
paretoplot_sim_study(metric=c("CRPS_rank", "time"),
show_legend=FALSE)
#=================================
#   MAKE SUPPLEMENTAL FIGURES
#=================================
filter_sim_study(res, NSR=0) %>%
paretoplot_sim_study(metric=c("CRPS_rank", "time"),
show_legend=FALSE,
title="CRPS Rank vs Time (NSR=0)")
filter_sim_study(res, NSR=0.5) %>%
paretoplot_sim_study(metric=c("CRPS_rank", "time"),
show_legend=FALSE,
title="(NSR=0.5)")
heatmap_sim_study(filter_sim_study(res, NSR=0),
metric = "RMSE_rank",
title="CRPS Rank (NSR = 0)",
orientation = "horizontal", color_scale = "mako")
f_curr <- "rabbits"
filter_sim_study(res, id=f_curr)
filter_sim_study(res, id=f_curr) %>%
boxplots_sim_study(group_by="NSR")
filter_sim_study(res, id=f_curr) %>%
boxplots_sim_study(group_by="NSR", y_scale_fun = log10)
filter_sim_study(res, id=f_curr) %>%
boxplots_sim_study(group_by="NSR", y_scale_fun = log10, ylim=c(0, 1))
filter_sim_study(res, id=f_curr) %>%
boxplots_sim_study(group_by="NSR", y_scale_fun = log10, ylim=c(0.01, 1))
filter_sim_study(res, id=f_curr) %>%
boxplots_sim_study(group_by="NSR", y_scale_fun = log10, ylim=c(0.001, 1))
filter_sim_study(res, id=f_curr) %>%
boxplots_sim_study(group_by="NSR", y_scale_fun = log10, ylim=c(0.001, 0.2))
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(group_by="NSR", y_scale_fun = log10, ylim=c(0.001, 0.2))
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(group_by="NSR", y_scale_fun = log10)
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(y_scale_fun = log10)
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0)"))
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0)"))
filter_sim_study(res, id=f_curr, NSR=0.1) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0.1)"))
filter_sim_study(res, id=f_curr, NSR=0.5) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0.1)"))
filter_sim_study(res, id=f_curr, NSR=0.5) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0.5)"))
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0)"))
filter_sim_study(res, id=f_curr, NSR=0.5) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0.5)"))
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0)"), sort_by="alphabetical")
filter_sim_study(res, id=f_curr, NSR=0.5) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0.5)"), sort_by="alphabetical")
paste0("figs/khaos/SM_box0_", f_curr, ".png")
for(f_curr in f_vec){
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0)"), sort_by="alphabetical")
ggsave(paste0("figs/khaos/SM_box0_", f_curr, ".png"),
width=5, height=3, units="in", dpi=600)
filter_sim_study(res, id=f_curr, NSR=0.5) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0.5)"), sort_by="alphabetical")
ggsave(paste0("figs/khaos/SM_box5_", f_curr, ".png"),
width=5, height=3, units="in", dpi=600)
}
f_vec <- c("banana", "rabbits", "ishigami", "pollutant_uni", "friedman20")
for(f_curr in f_vec){
filter_sim_study(res, id=f_curr, NSR=0) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0)"), sort_by="alphabetical")
ggsave(paste0("figs/khaos/SM_box0_", f_curr, ".png"),
width=5, height=3, units="in", dpi=600)
filter_sim_study(res, id=f_curr, NSR=0.5) %>%
boxplots_sim_study(y_scale_fun = log10,
title=paste0(f_curr, " (NSR=0.5)"), sort_by="alphabetical")
ggsave(paste0("figs/khaos/SM_box5_", f_curr, ".png"),
width=5, height=3, units="in", dpi=600)
}
library(duqling)
library(tidyverse)
library(khaos)
rerun_simulations <- FALSE # We can just load these instead
rerun_sobol <- FALSE       # Do you want to recreate Sobol figures?
#==================================
#       RUN SIMULATION STUDY
#==================================
source("R/khaos/khaos_sim_study.R")
# Or just load in the data:
load("data/results_khaos.Rda")
#==================================
#       MAKE FIGURES
#==================================
source("R/khaos/khaos_figures.R")
# Takes slightly longer to run these:
if(rerun_sobol){
source("R/khaos/khaos_sobol.R")
}
#==================================
#       MAKE FIGURES
#==================================
source("R/khaos/khaos_figures.R")
library(duqling)
library(tidyverse)
library(khaos)
rerun_simulations <- FALSE # We can just load these instead
rerun_sobol <- FALSE       # Do you want to recreate Sobol figures?
#==================================
#       RUN SIMULATION STUDY
#==================================
source("R/khaos/khaos_sim_study.R")
# Or just load in the data:
load("data/results_khaos.Rda")
#==================================
#       MAKE FIGURES
#==================================
source("R/khaos/khaos_figures.R")
duq_data_big <- process_sim_study(results_bigdata)
load("data/results_paper_data.Rda")
duq_data_big <- process_sim_study(results_bigdata)
filter_sim_study(duq_data_big) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (Big Datasets)")
filter_sim_study(duq_data_big) %>%
rankplot_sim_study("CRPS_med", title="CRPS Rank (Big Datasets)")
filter_sim_study(duq_data_big) %>%
rankplot_sim_study("CRPS_max", title="CRPS Rank (Big Datasets)")
path <- "figs/main/Figure12.eps"
custom <- function(xx){
log10(pmin(1, pmax(0.001, xx)))
}
filter_sim_study(duq_data_big) %>%
heatmap_sim_study(metric="CRPS_med", y_scale_fun = custom,
colorbar_labels = list(breaks=log10(c(0.001,  0.1, 0.56, 1)),
labels=c("<0.001", "0.1", "0.56", "")),
color_scale="mako",
title="Median CRPS (Big Datasets)")
ggsave(path, height=5, width=8)
path <- "figs/main/Figure11.eps"
custom <- function(xx){
log10(pmin(1, pmax(0.001, xx)))
}
filter_sim_study(duq_data) %>%
heatmap_sim_study(metric="CRPS_med", y_scale_fun = custom,
colorbar_labels = list(breaks=log10(c(0.001, 0.01,  0.1, 0.56, 1)),
labels=c("<0.001", "0.01", "0.1", "0.56", "")),
color_scale="mako",
title="Median CRPS (Small Datasets)")
duq_data <- process_sim_study(results_smalldata)
path <- "figs/main/Figure11.eps"
custom <- function(xx){
log10(pmin(1, pmax(0.001, xx)))
}
duq_data <- process_sim_study(results_smalldata)
duq_data_big <- process_sim_study(results_bigdata)
path <- "figs/main/Figure11.eps"
custom <- function(xx){
log10(pmin(1, pmax(0.001, xx)))
}
filter_sim_study(duq_data) %>%
heatmap_sim_study(metric="CRPS_med", y_scale_fun = custom,
colorbar_labels = list(breaks=log10(c(0.001, 0.01,  0.1, 0.56, 1)),
labels=c("<0.001", "0.01", "0.1", "0.56", "")),
color_scale="mako",
title="Median CRPS (Small Datasets)")
ggsave(path, height=5.5, width=8)
path <- "figs/main/Figure12.eps"
custom <- function(xx){
log10(pmin(1, pmax(0.001, xx)))
}
filter_sim_study(duq_data_big) %>%
heatmap_sim_study(metric="CRPS_med", y_scale_fun = custom,
colorbar_labels = list(breaks=log10(c(0.001, 0.01, 0.1, 0.56, 1)),
labels=c("<0.001", "0.01", "0.1", "0.56", "")),
color_scale="mako",
title="Median CRPS (Big Datasets)")
ggsave(path, height=5, width=8)
install.packages("Rcppautodiff")
install.packages("RcppFastAD")
remove.packages("duqling")
devtools::install_github("knrumsey/duqling")
quack()
devtools::install_github("knrumsey/duqling")
library(duqling)
devtools::install_github("knrumsey/duqling")
library(duqling)
#devtools::install_github("knrumsey/duqling")
library(duqling)
# For installation:
#    devtools::install_github("knrumsey/duqling")
library(duqling)
quack()
?quack
quack()
quack(verbose=TRUE)
quack(input_dim = 7:10, stochastic=FALSE)
q <- quack("circuit")
q
q <- quack("circuit", verbose=FALSE)
print(q)
names(quack())
data_quack()
data_quack(raw=TRUE)
data_quack(raw=TRUE)
# Must be in data_quack(raw=TRUE)$dname
dname <- "stochastic_sir"
data <- get_UQ_data(dname)
data
data_quack()
?duq
?borehole
?run_sim_study_data
xx <- rgamma(500, 3, 1.2)
hist(xx, freq=FALSE, breaks=30)
xx <- rgamma(500, 3, 1.2) + 5
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
xx <- rgamma(500, 3, 1.2) + 6
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
xx <- rgamma(500, 3, 1.2) + 6
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
x_seq <- seq(5, 17, length.out=10000)
?density
density(xx, from=5, to=17, n=1001)
plot(density(xx))
plot(d)
d <- density(xx, from=5, to=17, n=1001)
plot(d)
d$x
d <- density(xx, from=5, to=17, n=1002)
d$x
d <- density(xx, from=5, to=17, n=1200)
plot(d)
d$x
d <- density(xx, from=5, to=17, n=1201)
plot(d)
d$x
which(d$x == 13)
idx <- which.min(abs(d$x - 13))
idx
cut <- d$y[idx]
cut
abline(h=cut)
sum(d$y)
d <- density(xx, from=4, to=18, n=1201)
plot(d)
idx <- which.min(abs(d$x - 13))
cut <- d$y[idx]
sum(d$y)
denominator <- sum(d$y)
d$y <- d$y / sum(d$y)
sum(d$y)
idx_y <- which(d$y < cut)
idx_y
sum(d$y[idx_y])
x_seq <- seq(5, 17, length.out=10000)
d <- density(xx, from=4, to=18, n=1201)
plot(d)
idx <- which.min(abs(d$x - 13))
cut <- d$y[idx]
idx_y <- which(d$y < cut)
d <- density(xx, from=4, to=18, n=1201)
plot(d)
idx <- which.min(abs(d$x - 13))
cut <- d$y[idx]
idx_y <- which(d$y < cut)
# Normalize distribution
d$y <- d$y / sum(d$y)
sum(d$y[idx_y])
xx <- rgamma(500, 3, 1.2) + 6
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
xx <- rgamma(500, 3, 1.2) + 6
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
xx <- rgamma(500, 3, 1.2) + 6
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
set.seed(109132098)
xx <- rgamma(500, 3, 1.2) + 6
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
mean(xx > 13)
set.seed(1091320981)
xx <- rgamma(500, 3, 1.2) + 6
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
mean(xx > 13)
xx <- rgamma(500, 3, 1.2) + 7
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
mean(xx > 13)
set.seed(100981)
xx <- rgamma(500, 3, 1.2) + 7
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
mean(xx > 13)
xx <- rgamma(500, 3, 1.2) + 8
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
mean(xx > 13)
set.seed(100981)
xx <- rgamma(500, 3, 1.2) + 8
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
mean(xx > 13)
set.seed(100981)
xx <- rgamma(500, 3, 1.2) + 8
hist(xx, freq=FALSE, breaks=30)
abline(v=13, lwd=2, lty=3)
mean(xx > 13)
d <- density(xx, from=4, to=18, n=1201)
plot(d)
MASS::boxcox(xx~1)
?get_emulator_functions
?run_sim_study
tic()
library(tictoc)
tic()
foo = toc()
foo$toc-foo$tic
?vapply
as.character(1:5)
k <- c(3, 5, 4)
n <- 10
C <- vapply(k, function(ki) sample(as.character(1:ki), n, replace=TRUE))
C <- vapply(k, function(ki) sample(as.character(1:ki), n, replace=TRUE), FUN.VALUE=1:n)
C <- vapply(k, function(ki) sample(as.character(1:ki), n, replace=TRUE), FUN.VALUE=as.character(1:n))
dim(C)
C
path <- "figs/main/Figure2.eps"
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (n=1000, NSR=0.1)")
library(tidyverse)
library(duqling)
path <- "figs/main/Figure2.eps"
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (n=1000, NSR=0.1)")
load('data/results_paper.Rda')
path <- "figs/main/Figure2.eps"
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (n=1000, NSR=0.1)")
duq <- process_sim_study(results, scale_CRPS = TRUE)
path <- "figs/main/Figure2.eps"
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (n=1000, NSR=0.1)")
ggsave(path, height=4, width=8)
path <- "figs/main/Figure2.pdf"
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (n=1000, NSR=0.1)")
ggsave(path, height=4, width=8)
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (n=1000, NSR=0.1)")
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS_med", title="CRPS Rank (n=1000, NSR=0.1)")
filter_sim_study(duq, n_train=1000, NSR=0.1) %>%
rankplot_sim_study("CRPS", title="CRPS Rank (n=1000, NSR=0.1)")
